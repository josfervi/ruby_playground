UNANSWERED

what is a memo?  (see reduce: https://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-reduce)
what is a block? (see reduce: https://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-reduce)

how to map? e.g. "abcde".map { |chr| 1 if chr.vowel? else 0 } #=> [1,0,0,0,1]

what does ruby 'do' do?
when are things like '|val|' and {} used?

does ruby support the functional paradigm? because I get the feeling it does.

what is a symbol (e.g. :dog) in ruby? how's it different from a variable?

in the standard ruby libraries, does the ! in !-punctuated methods (e.g. Array#sort!) indicate that the method is in-place? has side-effects? modifies the input? what does it mean?

how does ruby disambiguate between a variable and a zero-argument-method that have the same name?
in 20-num-repeats, I can see how: num_repeats is a variable and also a one-argument method.

difference between .each do { |stuff| stuff } (is this one even valid?), .each do |stuff| stuff end, and for val in array stuff end?

in:
1 class Book
2  def title=(new_title)
3    @title= titleize(new_title)
4  end
5  ...
6 end
how does ruby know that line 3 is not the alternate syntax of @title=(titleize(new_title))
it's a good thing that ruby knows not to call @title=(titleize(new_title)) because that would result in infinite recursive calls
but how does ruby know?
#
may be related: "Inside an object, you can't call that object's setter methods directly"
                from https://newcircle.com/bookshelf/ruby_tutorial/classes

is @ a shortcut for self?

ANSWERED:
what is :dog? is it a variable? a symbol? a record?
A: they are symbols